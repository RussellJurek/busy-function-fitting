{"name":"Busy-function-fitting","tagline":"A C/C++ library and Python module that allows users to fit the Busy Function (Westmeier, Jurek, Obreschkow, Koribalski & Staveley-Smith 2013) to data. This software uses OMP to leverage machines with multi-core CPUs.","body":"Summary\r\nA C/C++ library and Python module that allows users to fit the Busy Function (Westmeier, Jurek, Obreschkow, Koribalski & Staveley-Smith 2013) to data. This software uses OMP to leverage machines with multi-core CPUs.\r\n\r\nThe distribution includes example C, C++ and Python codes as well as test data.\r\n\r\nUPDATE 13th of July, 2015: I'm currently working on v2.0 of the code. This new version includes:\r\n\r\nA slightly `busier' Busy Function.\r\nDetection of `null' signals.\r\nAn improved approximation of the observational co-variance matrix.\r\nSupport for Nvidia GPUs using CUDA.\r\nPlease email me if you would like to be notified when v2.0 is released.\r\n\r\nThis page is migrating to GitHub? due to the closure of Google Code. v2.0 of this code will be released via GitHub?.\r\n\r\nVersion History\r\nCurrent version: 1.4, BF_dist_1.4.tar.gz in /svn/trunk/\r\n\r\nDownload instructions for distribution XXX\r\nXXX is a substitute for the distribution name.\r\n\r\nClick on the 'Source' tab above.\r\nIn the 'Source' tab, click on the 'Trunk' folder below 'svn' in the left panel.\r\nClick on the current (1.4) BF distribution to download it.\r\nGunzip the distribution. Type \"gunzip XXX\" at the command prompt.\r\nUn-tar the distribution. Type \"tar -xvf XXX\" at the command prompt. This will create a BF_dist directory.\r\nGo into the BF_dist directory.\r\nType 'make all'.\r\nGo into the python sub-directory.\r\nType 'python setup.py build'.\r\nType 'sudo python setup.py install'.\r\nMore detailed instructions can be found in the README.txt file in the BF_dist directory.\r\n\r\nThe python module has been successfully installed and used with Python 2 and 3.\r\n\r\nUpdating from an earlier version?\r\n\r\nInstallation may fail if you try to install on top of an existing BF distribution. Use, make distclean, to remove all files from a previous installation.\r\n\r\nMac OS X users\r\n\r\nNewer versions of Mac OS X don't actually have a GCC compiler. They use a Clang compiler with a symbolic link, /usr/bin/gcc. Clang doesn't support OMP. If you get OMP errors on OS X 10.8+, then it's because your gcc compiler is actually a Clang compiler. Install a gcc compiler and it'll work.\r\n\r\nImportant changes\r\n\r\nFrom v1.2 onwards, the BF distribution includes a no-OMP C/C++ library. The OMP enabled C/C++ library will now only be built if the supplied C/C++ compilers support OMP. If you aren't worried about maximising performance, then just use the C/C++ libraries without OMP --- and build the python module with them. See the README file for more details.\r\n\r\nFrom v1.3 onwards, the BF distribution will build both static and shared C/C++ libraries.\r\n\r\nFrom v1.4 onwards, the constraints applied to the power-law amplitude and exponent are relaxed. They have been changed in the following ways, 1. Power-law scaling: >= 0.0 --> unconstrained. 2. Power-law exponent: 2 <= N <= 8 --> 1 <= N <= 8. Additionally, the example programs in the bin sub-folder will link to the static libraries. This is to guard against people building the static libraries but not installing them into their system's standard location. In this instance the example programs would fail to launch. To make it easier for people I've just avoided the problem.\r\n\r\nContact details\r\n\r\nEmail me at Russell.Jurek@gmail.com\r\n\r\nSpecial thanks\r\nTobias Westmeier and Alfred Tiley for providing invaluable beta testing.\r\n","google":"UA-46463815-6","note":"Don't delete this file! It's used internally to help with page regeneration."}